-- Based on https://github.com/vague2k/vague.nvim

local c = {
	bg = "#141415",
	fg = "#cdcdcd",
	float_border = "#878787",
	line = "#252530",
	comment = "#606079",
	builtin = "#b4d4cf",
	func = "#c48282",
	string = "#e8b589",
	number = "#e0a363",
	property = "#c3c3d5",
	constant = "#aeaed1",
	call = "#bb9dbd",
	visual = "#333738",
	error = "#d8647e",
	warning = "#f3be7c",
	hint = "#7e98e8",
	operator = "#90a0b5",
	keyword = "#6e94b2",
	type = "#9bb4bc",
	search = "#405065",
	plus = "#7fa563",
	delta = "#f3be7c",
}

local function color_to_rgb(color)
	local function byte(value, offset) return bit.band(bit.rshift(value, offset), 0xFF) end

	local new_color = vim.api.nvim_get_color_by_name(color)
	if new_color == -1 then new_color = 000 end

	return { byte(new_color, 16), byte(new_color, 8), byte(new_color, 0) }
end

local function blend(color, base_color, alpha)
	local fg_rgb = color_to_rgb(color)
	local bg_rgb = color_to_rgb(base_color)

	local function blend_channel(i)
		local ret = (alpha * fg_rgb[i] + ((1 - alpha) * bg_rgb[i]))
		return math.floor(math.min(math.max(0, ret), 255) + 0.5)
	end

	local result = string.format("#%02X%02X%02X", blend_channel(1), blend_channel(2), blend_channel(3))

	return result
end

local set = vim.api.nvim_set_hl

-- Built in
set(0, "@attribute", { link = "Constant" })
set(0, "@boolean", { link = "Boolean" })
set(0, "@character", { link = "String" })
set(0, "@constant", { link = "Constant" })
set(0, "@constructor", { fg = c.constant })
set(0, "@diff.delta", { fg = c.delta })
set(0, "@diff.minus", { fg = c.error })
set(0, "@diff.plus", { fg = c.plus })
set(0, "@function.call", { fg = c.call })
set(0, "@function.method.call", { link = "@function.call" })
set(0, "@keyword", { link = "Keyword" })
set(0, "@keyword.conditional", { link = "Keyword" })
set(0, "@keyword.exception", { link = "Exception" })
set(0, "@keyword.import", { link = "PreProc" })
set(0, "@keyword.operator", { fg = c.keyword })
set(0, "@label", { link = "Label" })
set(0, "@markup", { fg = c.fg })
set(0, "@markup.heading", { fg = c.keyword, bold = true })
set(0, "@markup.italic", { fg = c.fg, italic = true })
set(0, "@markup.link", { fg = c.string })
set(0, "@markup.link.uri", { fg = c.string, underline = true })
set(0, "@markup.list", { fg = c.func })
set(0, "@markup.list.checked", { fg = c.func })
set(0, "@markup.list.unchecked", { fg = c.func })
set(0, "@markup.math", { fg = c.string })
set(0, "@markup.quote.markdown", { fg = c.comment })
set(0, "@markup.raw", { fg = c.constant })
set(0, "@markup.strikethrough", { fg = c.comment, strikethrough = true })
set(0, "@markup.strong", { fg = c.fg, bold = true })
set(0, "@markup.underline", { fg = c.fg, underline = true })
set(0, "@module", { link = "Constant" })
set(0, "@number", { link = "Number" })
set(0, "@number.float", { link = "Float" })
set(0, "@operator", { link = "Operator" })
set(0, "@property", { link = "@variable.member" })
set(0, "@punctuation.bracket", { fg = c.fg })
set(0, "@punctuation.delimiter", { fg = c.fg })
set(0, "@punctuation.special", { link = "SpecialChar" })
set(0, "@string", { link = "String" })
set(0, "@string.documentation", { link = "Comment" })
set(0, "@string.escape", { link = "SpecialChar" })
set(0, "@string.regexp", { link = "SpecialChar" })
set(0, "@string.special.symbol", { link = "Identifier" })
set(0, "@string.special.url", { fg = c.func })
set(0, "@tag.attribute", { link = "Identifier" })
set(0, "@tag.delimiter", { fg = c.fg })
set(0, "@text.diff.add", { link = "DiffAdd" })
set(0, "@text.diff.delete", { link = "DiffDelete" })
set(0, "@type", { link = "Type" })
set(0, "@variable", { fg = c.fg })
set(0, "@variable.builtin", { fg = c.builtin })
set(0, "@variable.member", { fg = c.builtin })
set(0, "Added", { fg = c.plus })
set(0, "Boolean", { fg = c.number })
set(0, "Changed", { fg = c.delta })
set(0, "Character", { fg = c.string })
set(0, "ColorColumn", { bg = c.line })
set(0, "Comment", { fg = c.comment, italic = true })
set(0, "Conceal", { fg = c.func, bg = c.bg })
set(0, "Conditional", { fg = c.keyword })
set(0, "Constant", { fg = c.constant })
set(0, "CurSearch", { fg = c.fg, bg = c.search or c.visual })
set(0, "CursorColumn", { bg = c.line })
set(0, "CursorLine", { bg = c.line })
set(0, "CursorLineNr", { fg = c.fg, bg = c.line })
set(0, "Debug", { fg = c.constant })
set(0, "Define", { fg = c.comment })
set(0, "Delimiter", { fg = c.fg })
set(0, "DiagnosticError", { fg = c.error })
set(0, "DiagnosticHint", { fg = c.hint })
set(0, "DiagnosticInfo", { fg = c.constant })
set(0, "DiagnosticOk", { fg = c.plus })
set(0, "DiagnosticUnderlineError", { undercurl = true, sp = c.error })
set(0, "DiagnosticUnderlineHint", { undercurl = true, sp = c.hint })
set(0, "DiagnosticUnderlineInfo", { undercurl = true, sp = c.constant })
set(0, "DiagnosticUnderlineOk", { undercurl = true, sp = c.plus })
set(0, "DiagnosticUnderlineWarn", { undercurl = true, sp = c.delta })
set(0, "DiagnosticVirtualTextError", { fg = c.error })
set(0, "DiagnosticVirtualTextHint", { fg = c.hint })
set(0, "DiagnosticVirtualTextInfo", { fg = c.constant })
set(0, "DiagnosticVirtualTextOk", { fg = c.plus })
set(0, "DiagnosticVirtualTextWarn", { fg = c.warning })
set(0, "DiagnosticWarn", { fg = c.warning })
set(0, "DiffAdd", { bg = blend(c.plus, c.bg, 0.2) })
set(0, "DiffChange", { bg = blend(c.delta, c.bg, 0.1) })
set(0, "DiffDelete", { bg = blend(c.error, c.bg, 0.2) })
set(0, "DiffFile", { fg = c.keyword })
set(0, "DiffIndexLine", { fg = c.comment })
set(0, "DiffText", { bg = blend(c.delta, c.bg, 0.3) })
set(0, "Directory", { fg = c.hint })
set(0, "EndOfBuffer", { fg = c.comment or c.bg })
set(0, "Error", { fg = c.error, bold = true })
set(0, "ErrorMsg", { fg = c.error, bold = true })
set(0, "Exception", { fg = c.keyword })
set(0, "Float", { fg = c.number })
set(0, "FloatBorder", { fg = c.float_border, bg = c.bg })
set(0, "FloatFooter", { fg = c.float_border, bg = c.bg })
set(0, "FloatTitle", { fg = c.float_border, bg = c.bg })
set(0, "FoldColumn", { fg = c.comment, bg = c.bg })
set(0, "Folded", { fg = c.comment, bg = c.line })
set(0, "Function", { fg = c.func })
set(0, "Identifier", { fg = c.constant })
set(0, "IncSearch", { fg = c.bg, bg = c.search or c.visual })
set(0, "Include", { fg = c.keyword })
set(0, "Keyword", { fg = c.keyword, italic = true })
set(0, "Label", { fg = c.keyword })
set(0, "LineNr", { fg = c.comment, bg = c.line })
set(0, "LspCodeLens", { fg = c.comment, italic = true })
set(0, "LspCodeLensSeparator", { fg = c.comment })
set(0, "LspReferenceRead", { bg = c.comment })
set(0, "LspReferenceText", { bg = c.comment })
set(0, "LspReferenceWrite", { bg = c.comment })
set(0, "Macro", { fg = c.constant })
set(0, "MatchParen", { fg = c.fg, bg = c.visual })
set(0, "ModeMsg", { fg = c.string })
set(0, "MoreMsg", { fg = c.func, bold = true })
set(0, "MsgSeparator", { fg = c.string, bg = c.line, bold = true })
set(0, "NonText", { fg = c.comment })
set(0, "Normal", { fg = c.fg, bg = c.bg })
set(0, "NormalFloat", { fg = c.fg, bg = c.bg })
set(0, "Number", { fg = c.number })
set(0, "Operator", { fg = c.operator })
set(0, "Pmenu", { fg = c.fg, bg = c.bg })
set(0, "PmenuSbar", { fg = c.visual, bg = c.comment })
set(0, "PmenuSel", { fg = c.constant, bg = c.line })
set(0, "PmenuThumb", { fg = c.comment, bg = c.visual })
set(0, "PreCondit", { fg = c.comment })
set(0, "PreProc", { fg = c.func })
set(0, "Question", { fg = c.constant })
set(0, "QuickFixLine", { link = "CursorLine" })
set(0, "Removed", { fg = c.error })
set(0, "Repeat", { fg = c.keyword })
set(0, "Search", { fg = c.fg, bg = c.search or c.visual })
set(0, "SignColumn", { fg = c.fg, bg = c.line })
set(0, "Special", { fg = c.builtin })
set(0, "SpecialChar", { fg = c.keyword })
set(0, "SpecialComment", { fg = c.keyword })
set(0, "SpecialKey", { fg = c.comment })
set(0, "SpellBad", { fg = "none", undercurl = true })
set(0, "SpellCap", { fg = "none", undercurl = true })
set(0, "SpellLocal", { fg = "none", undercurl = true })
set(0, "SpellRare", { fg = "none", undercurl = true })
set(0, "Statement", { fg = c.keyword })
set(0, "StatusLine", { fg = c.bg, bg = c.keyword, bold = true })
set(0, "StatusLineNC", { fg = c.float_border, bg = c.visual })
set(0, "StatusLineTerm", { link = "StatusLine" })
set(0, "StatusLineTermNC", { link = "StatusLineNC" })
set(0, "StorageClass", { fg = c.constant })
set(0, "String", { fg = c.string })
set(0, "Structure", { fg = c.constant })
set(0, "Substitute", { fg = c.type, bg = c.visual })
set(0, "TabLine", { fg = c.fg, bg = c.bg })
set(0, "TabLineFill", { fg = c.comment, bg = c.bg })
set(0, "TabLineSel", { fg = c.bg, bg = c.fg })
set(0, "Tag", { fg = c.builtin })
set(0, "Terminal", { fg = c.fg, bg = c.bg })
set(0, "Title", { fg = c.property })
set(0, "Todo", { fg = c.func, italic = true })
set(0, "ToolbarButton", { fg = c.bg, bg = c.visual })
set(0, "ToolbarLine", { fg = c.fg })
set(0, "Type", { fg = c.type })
set(0, "Typedef", { fg = c.constant })
set(0, "Visual", { bg = c.visual })
set(0, "VisualNOS", { fg = "none", bg = c.comment, underline = true })
set(0, "WarningMsg", { fg = c.warning, bold = true })
set(0, "Whitespace", { fg = blend(c.comment, c.bg, 0.3) })
set(0, "WildMenu", { fg = c.bg, bg = c.func })
set(0, "WinBar", { link = "StatusLine" })
set(0, "WinBarNC", { link = "StatusLineNC" })
set(0, "WinSeparator", { fg = c.float_border })
set(0, "debugBreakpoint", { fg = c.bg, bg = c.operator })
set(0, "debugPC", { link = "DiffDelete" })

-- Plugins
set(0, "CmpGhostText", { fg = c.comment })
set(0, "CmpItemAbbr", { fg = c.fg, bg = "none" })
set(0, "CmpItemAbbrDeprecated", { fg = c.error, bg = "none", strikethrough = true })
set(0, "CmpItemAbbrMatch", { fg = c.delta, bold = true })
set(0, "CmpItemAbbrMatchFuzzy", { fg = c.delta, bold = true })
set(0, "CmpItemKind", { fg = c.comment })
set(0, "CmpItemMenu", { link = "Pmenu" })
set(0, "DiffviewDiffDeleteDim", { link = "Whitespace" })
set(0, "DiffviewFilePanelSelected", { fg = c.string, bold = true })
set(0, "FzfLuaBorder", { link = "FloatBorder" })
set(0, "NeotestAdapterName", { fg = c.hint, bold = true })
set(0, "NeotestDir", { link = "Directory" })
set(0, "NeotestFailed", { fg = c.error })
set(0, "NeotestFile", { link = "Directory" })
set(0, "NeotestFocused", { fg = c.delta, bold = true })
set(0, "NeotestIndent", { fg = c.comment })
set(0, "NeotestMarked", { fg = c.delta })
set(0, "NeotestNamespace", { fg = c.call })
set(0, "NeotestPassed", { fg = c.plus })
set(0, "NeotestRunning", { fg = c.hint })
set(0, "NeotestSkipped", { fg = c.warning })
set(0, "NeotestTarget", { fg = c.hint })
set(0, "NeotestUnknown", { fg = c.comment })
set(0, "NeotestWatching", { fg = c.warning })
set(0, "TreesitterContext", { bg = c.line })
set(0, "TreesitterContextLineNumber", { fg = c.comment, bg = c.line })
set(0, "diffAdded", { link = "@diff.plus" })
set(0, "diffRemoved", { link = "@diff.minus" })
